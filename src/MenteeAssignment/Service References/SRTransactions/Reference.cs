//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MenteeAssignment.SRTransactions {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SRTransactions.IWCFTransactions")]
    public interface IWCFTransactions {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/getAllTransaction", ReplyAction="http://tempuri.org/IWCFTransactions/getAllTransactionResponse")]
        System.Data.DataTable getAllTransaction(string strWhere, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/getAllTransaction", ReplyAction="http://tempuri.org/IWCFTransactions/getAllTransactionResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getAllTransactionAsync(string strWhere, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/getTransactionByID", ReplyAction="http://tempuri.org/IWCFTransactions/getTransactionByIDResponse")]
        Model.ModelTransactions getTransactionByID(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/getTransactionByID", ReplyAction="http://tempuri.org/IWCFTransactions/getTransactionByIDResponse")]
        System.Threading.Tasks.Task<Model.ModelTransactions> getTransactionByIDAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/determineHeader", ReplyAction="http://tempuri.org/IWCFTransactions/determineHeaderResponse")]
        string determineHeader(string lbl, string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/determineHeader", ReplyAction="http://tempuri.org/IWCFTransactions/determineHeaderResponse")]
        System.Threading.Tasks.Task<string> determineHeaderAsync(string lbl, string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/determineSort", ReplyAction="http://tempuri.org/IWCFTransactions/determineSortResponse")]
        string determineSort(string lbl, string SortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/determineSort", ReplyAction="http://tempuri.org/IWCFTransactions/determineSortResponse")]
        System.Threading.Tasks.Task<string> determineSortAsync(string lbl, string SortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/add", ReplyAction="http://tempuri.org/IWCFTransactions/addResponse")]
        void add(Model.ModelTransactions MT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/add", ReplyAction="http://tempuri.org/IWCFTransactions/addResponse")]
        System.Threading.Tasks.Task addAsync(Model.ModelTransactions MT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/update", ReplyAction="http://tempuri.org/IWCFTransactions/updateResponse")]
        void update(Model.ModelTransactions MT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/update", ReplyAction="http://tempuri.org/IWCFTransactions/updateResponse")]
        System.Threading.Tasks.Task updateAsync(Model.ModelTransactions MT);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/delete", ReplyAction="http://tempuri.org/IWCFTransactions/deleteResponse")]
        void delete(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/delete", ReplyAction="http://tempuri.org/IWCFTransactions/deleteResponse")]
        System.Threading.Tasks.Task deleteAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/updateFlag", ReplyAction="http://tempuri.org/IWCFTransactions/updateFlagResponse")]
        int updateFlag(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFTransactions/updateFlag", ReplyAction="http://tempuri.org/IWCFTransactions/updateFlagResponse")]
        System.Threading.Tasks.Task<int> updateFlagAsync(string ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFTransactionsChannel : MenteeAssignment.SRTransactions.IWCFTransactions, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFTransactionsClient : System.ServiceModel.ClientBase<MenteeAssignment.SRTransactions.IWCFTransactions>, MenteeAssignment.SRTransactions.IWCFTransactions {
        
        public WCFTransactionsClient() {
        }
        
        public WCFTransactionsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFTransactionsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFTransactionsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFTransactionsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable getAllTransaction(string strWhere, string strOrderBy) {
            return base.Channel.getAllTransaction(strWhere, strOrderBy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getAllTransactionAsync(string strWhere, string strOrderBy) {
            return base.Channel.getAllTransactionAsync(strWhere, strOrderBy);
        }
        
        public Model.ModelTransactions getTransactionByID(string ID) {
            return base.Channel.getTransactionByID(ID);
        }
        
        public System.Threading.Tasks.Task<Model.ModelTransactions> getTransactionByIDAsync(string ID) {
            return base.Channel.getTransactionByIDAsync(ID);
        }
        
        public string determineHeader(string lbl, string txt) {
            return base.Channel.determineHeader(lbl, txt);
        }
        
        public System.Threading.Tasks.Task<string> determineHeaderAsync(string lbl, string txt) {
            return base.Channel.determineHeaderAsync(lbl, txt);
        }
        
        public string determineSort(string lbl, string SortDirection) {
            return base.Channel.determineSort(lbl, SortDirection);
        }
        
        public System.Threading.Tasks.Task<string> determineSortAsync(string lbl, string SortDirection) {
            return base.Channel.determineSortAsync(lbl, SortDirection);
        }
        
        public void add(Model.ModelTransactions MT) {
            base.Channel.add(MT);
        }
        
        public System.Threading.Tasks.Task addAsync(Model.ModelTransactions MT) {
            return base.Channel.addAsync(MT);
        }
        
        public void update(Model.ModelTransactions MT) {
            base.Channel.update(MT);
        }
        
        public System.Threading.Tasks.Task updateAsync(Model.ModelTransactions MT) {
            return base.Channel.updateAsync(MT);
        }
        
        public void delete(string ID) {
            base.Channel.delete(ID);
        }
        
        public System.Threading.Tasks.Task deleteAsync(string ID) {
            return base.Channel.deleteAsync(ID);
        }
        
        public int updateFlag(string ID) {
            return base.Channel.updateFlag(ID);
        }
        
        public System.Threading.Tasks.Task<int> updateFlagAsync(string ID) {
            return base.Channel.updateFlagAsync(ID);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MenteeAssignment.SRCustomer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SRCustomer.IWCFCustomer")]
    public interface IWCFCustomer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/getAllCustomer", ReplyAction="http://tempuri.org/IWCFCustomer/getAllCustomerResponse")]
        System.Data.DataTable getAllCustomer(string strWhere, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/getAllCustomer", ReplyAction="http://tempuri.org/IWCFCustomer/getAllCustomerResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getAllCustomerAsync(string strWhere, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/getCustomerByID", ReplyAction="http://tempuri.org/IWCFCustomer/getCustomerByIDResponse")]
        Model.ModelCustomer getCustomerByID(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/getCustomerByID", ReplyAction="http://tempuri.org/IWCFCustomer/getCustomerByIDResponse")]
        System.Threading.Tasks.Task<Model.ModelCustomer> getCustomerByIDAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/determineHeader", ReplyAction="http://tempuri.org/IWCFCustomer/determineHeaderResponse")]
        string determineHeader(string lbl, string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/determineHeader", ReplyAction="http://tempuri.org/IWCFCustomer/determineHeaderResponse")]
        System.Threading.Tasks.Task<string> determineHeaderAsync(string lbl, string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/determineSort", ReplyAction="http://tempuri.org/IWCFCustomer/determineSortResponse")]
        string determineSort(string lbl, string SortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/determineSort", ReplyAction="http://tempuri.org/IWCFCustomer/determineSortResponse")]
        System.Threading.Tasks.Task<string> determineSortAsync(string lbl, string SortDirection);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/add", ReplyAction="http://tempuri.org/IWCFCustomer/addResponse")]
        void add(Model.ModelCustomer MC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/add", ReplyAction="http://tempuri.org/IWCFCustomer/addResponse")]
        System.Threading.Tasks.Task addAsync(Model.ModelCustomer MC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/update", ReplyAction="http://tempuri.org/IWCFCustomer/updateResponse")]
        void update(Model.ModelCustomer MC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/update", ReplyAction="http://tempuri.org/IWCFCustomer/updateResponse")]
        System.Threading.Tasks.Task updateAsync(Model.ModelCustomer MC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/delete", ReplyAction="http://tempuri.org/IWCFCustomer/deleteResponse")]
        void delete(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/delete", ReplyAction="http://tempuri.org/IWCFCustomer/deleteResponse")]
        System.Threading.Tasks.Task deleteAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/updateFlag", ReplyAction="http://tempuri.org/IWCFCustomer/updateFlagResponse")]
        int updateFlag(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFCustomer/updateFlag", ReplyAction="http://tempuri.org/IWCFCustomer/updateFlagResponse")]
        System.Threading.Tasks.Task<int> updateFlagAsync(string ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFCustomerChannel : MenteeAssignment.SRCustomer.IWCFCustomer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFCustomerClient : System.ServiceModel.ClientBase<MenteeAssignment.SRCustomer.IWCFCustomer>, MenteeAssignment.SRCustomer.IWCFCustomer {
        
        public WCFCustomerClient() {
        }
        
        public WCFCustomerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFCustomerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFCustomerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFCustomerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable getAllCustomer(string strWhere, string strOrderBy) {
            return base.Channel.getAllCustomer(strWhere, strOrderBy);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getAllCustomerAsync(string strWhere, string strOrderBy) {
            return base.Channel.getAllCustomerAsync(strWhere, strOrderBy);
        }
        
        public Model.ModelCustomer getCustomerByID(string ID) {
            return base.Channel.getCustomerByID(ID);
        }
        
        public System.Threading.Tasks.Task<Model.ModelCustomer> getCustomerByIDAsync(string ID) {
            return base.Channel.getCustomerByIDAsync(ID);
        }
        
        public string determineHeader(string lbl, string txt) {
            return base.Channel.determineHeader(lbl, txt);
        }
        
        public System.Threading.Tasks.Task<string> determineHeaderAsync(string lbl, string txt) {
            return base.Channel.determineHeaderAsync(lbl, txt);
        }
        
        public string determineSort(string lbl, string SortDirection) {
            return base.Channel.determineSort(lbl, SortDirection);
        }
        
        public System.Threading.Tasks.Task<string> determineSortAsync(string lbl, string SortDirection) {
            return base.Channel.determineSortAsync(lbl, SortDirection);
        }
        
        public void add(Model.ModelCustomer MC) {
            base.Channel.add(MC);
        }
        
        public System.Threading.Tasks.Task addAsync(Model.ModelCustomer MC) {
            return base.Channel.addAsync(MC);
        }
        
        public void update(Model.ModelCustomer MC) {
            base.Channel.update(MC);
        }
        
        public System.Threading.Tasks.Task updateAsync(Model.ModelCustomer MC) {
            return base.Channel.updateAsync(MC);
        }
        
        public void delete(string ID) {
            base.Channel.delete(ID);
        }
        
        public System.Threading.Tasks.Task deleteAsync(string ID) {
            return base.Channel.deleteAsync(ID);
        }
        
        public int updateFlag(string ID) {
            return base.Channel.updateFlag(ID);
        }
        
        public System.Threading.Tasks.Task<int> updateFlagAsync(string ID) {
            return base.Channel.updateFlagAsync(ID);
        }
    }
}
